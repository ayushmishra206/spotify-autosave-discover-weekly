#!/usr/bin/env python3
"""
Discover Weekly Saver

A Python script to automatically save your Spotify Discover Weekly playlist to a master collection.
This script finds your current Discover Weekly playlist and adds all songs to a permanent 
"Discover Weekly Collection" playlist, preventing you from losing great music recommendations.

Features:
- Automatically finds your Discover Weekly playlist
- Creates a master "Discover Weekly Collection" playlist
- Prevents duplicate songs from being added
- Optional creation of weekly dated playlists
- Handles authentication automatically
- Perfect for automation (cron jobs, etc.)

Requirements:
- Python 3.6+
- spotipy library
- Spotify Developer App credentials

Setup:
1. Create a Spotify app at https://developer.spotify.com/dashboard/applications
2. Get your Client ID and Client Secret
3. Set redirect URI to http://127.0.0.1:8080/callback
4. Configure credentials in config.py or environment variables
5. Run the script

Author: Auto-generated by GitHub Copilot
License: MIT
"""

import spotipy
from spotipy.oauth2 import SpotifyOAuth
from datetime import datetime
import os

class DiscoverWeeklySaver:
    """
    A class to save Spotify Discover Weekly playlists to a permanent collection.
    
    This class handles the complete workflow of finding your Discover Weekly playlist,
    extracting the songs, and saving them to a master collection playlist while
    avoiding duplicates.
    
    Attributes:
        sp (spotipy.Spotify): Authenticated Spotify client
        user_id (str): Current user's Spotify ID
        scope (str): Required Spotify API permissions
    
    Example:
        >>> saver = DiscoverWeeklySaver(client_id, client_secret, redirect_uri)
        >>> saver.save_discover_weekly()
    """
    
    def __init__(self, client_id, client_secret, redirect_uri):
        """
        Initialize the Spotify client with OAuth authentication.
        
        Args:
            client_id (str): Spotify app client ID
            client_secret (str): Spotify app client secret  
            redirect_uri (str): Spotify app redirect URI (must match app settings)
            
        Raises:
            spotipy.SpotifyException: If authentication fails
        """
        self.scope = "playlist-read-private playlist-modify-private playlist-modify-public"
        
        self.sp = spotipy.Spotify(auth_manager=SpotifyOAuth(
            client_id=client_id,
            client_secret=client_secret,
            redirect_uri=redirect_uri,
            scope=self.scope
        ))
        
        self.user_id = self.sp.current_user()['id']
        
    def find_discover_weekly(self):
        """
        Find the user's Discover Weekly playlist by searching all playlists
        """
        print("🔍 Searching for Discover Weekly in your playlists...")
        
        all_playlists = []
        results = self.sp.current_user_playlists(limit=50)
        
        while results:
            all_playlists.extend(results['items'])
            if results['next']:
                results = self.sp.next(results)
            else:
                break
        
        print(f"📋 Found {len(all_playlists)} total playlists")
        
        # Look for Discover Weekly
        discover_weekly_candidates = []
        
        for playlist in all_playlists:
            name_lower = playlist['name'].lower()
            if 'discover' in name_lower and 'weekly' in name_lower:
                discover_weekly_candidates.append(playlist)
                print(f"🎯 Found potential Discover Weekly: '{playlist['name']}' (ID: {playlist['id']})")
        
        if discover_weekly_candidates:
            # Return the first one found
            return discover_weekly_candidates[0]['id']
        
        print("❌ No Discover Weekly playlist found in your library")
        print("💡 Make sure you have Discover Weekly in your library by following it on Spotify")
        return None
    
    def get_playlist_tracks(self, playlist_id):
        """
        Get all tracks from a playlist
        """
        tracks = []
        results = self.sp.playlist_tracks(playlist_id)
        
        while results:
            for item in results['items']:
                if item['track']:  # Skip None tracks
                    tracks.append(item['track']['uri'])
            
            if results['next']:
                results = self.sp.next(results)
            else:
                break
                
        return tracks
    
    def create_weekly_playlist(self, week_date=None):
        """
        Create a new playlist for this week's discoveries (only if it doesn't exist)
        """
        if week_date is None:
            week_date = datetime.now().strftime("%Y-%m-%d")
        
        playlist_name = f"Discover Weekly - {week_date}"
        
        # Check if playlist already exists
        playlists = self.sp.current_user_playlists(limit=50)
        while playlists:
            for playlist in playlists['items']:
                if playlist['name'] == playlist_name and playlist['owner']['id'] == self.user_id:
                    print(f"📝 Found existing playlist: {playlist_name}")
                    return playlist['id']
            
            if playlists['next']:
                playlists = self.sp.next(playlists)
            else:
                break
        
        # Create new playlist if it doesn't exist
        description = f"Saved Discover Weekly playlist from {week_date}"
        
        playlist = self.sp.user_playlist_create(
            user=self.user_id,
            name=playlist_name,
            public=False,
            description=description
        )
        
        print(f"🆕 Created new playlist: {playlist_name}")
        return playlist['id']
    
    def add_tracks_to_playlist(self, playlist_id, track_uris):
        """
        Add tracks to a playlist (Spotify limits to 100 tracks per request)
        """
        if not track_uris:
            return
        
        # Split into chunks of 100 (Spotify's limit)
        for i in range(0, len(track_uris), 100):
            chunk = track_uris[i:i + 100]
            self.sp.playlist_add_items(playlist_id, chunk)
    
    def get_master_collection_playlist(self):
        """
        Find or create THE master collection playlist for all saved Discover Weekly songs
        """
        collection_name = "Discover Weekly Collection"
        
        # Search through ALL playlists to find existing collection
        playlists = self.sp.current_user_playlists(limit=50)
        while playlists:
            for playlist in playlists['items']:
                if playlist['name'] == collection_name and playlist['owner']['id'] == self.user_id:
                    print(f"📚 Found existing master collection: {collection_name}")
                    return playlist['id']
            
            if playlists['next']:
                playlists = self.sp.next(playlists)
            else:
                break
        
        # Create new master collection if it doesn't exist
        print(f"🎯 Creating master collection playlist: {collection_name}")
        playlist = self.sp.user_playlist_create(
            user=self.user_id,
            name=collection_name,
            public=False,
            description="All songs from saved Discover Weekly playlists - automatically managed"
        )
        
        return playlist['id']
    
    def save_to_master_collection(self, track_uris):
        """
        Add new tracks to the master collection playlist (avoiding duplicates)
        """
        if not track_uris:
            return
            
        master_playlist_id = self.get_master_collection_playlist()
        
        # Get existing tracks to avoid duplicates
        print("🔍 Checking for existing tracks in master collection...")
        existing_tracks = set(self.get_playlist_tracks(master_playlist_id))
        new_tracks = [track for track in track_uris if track not in existing_tracks]
        
        if new_tracks:
            print(f"➕ Adding {len(new_tracks)} new tracks to master collection...")
            self.add_tracks_to_playlist(master_playlist_id, new_tracks)
            print(f"✅ Master collection now has {len(existing_tracks) + len(new_tracks)} total tracks")
        else:
            print("ℹ️  No new tracks to add - all songs already in master collection")
    
    def save_discover_weekly(self, playlist_id=None, create_weekly_playlist=None):
        """
        Main function to save this week's Discover Weekly
        """
        print("🎵 Looking for Discover Weekly playlist...")
        
        # Find Discover Weekly if ID not provided
        if not playlist_id:
            playlist_id = self.find_discover_weekly()
            if not playlist_id:
                return None
        
        # Get tracks from Discover Weekly
        try:
            tracks = self.get_playlist_tracks(playlist_id)
        except Exception as e:
            print(f"❌ Could not access Discover Weekly: {e}")
            return None
        
        if not tracks:
            print("❌ No tracks found in Discover Weekly!")
            return None
        
        print(f"📚 Found {len(tracks)} tracks in Discover Weekly")
        
        # Ask if user wants to create weekly dated playlist
        if create_weekly_playlist is None:
            print("\n📅 Do you want to create a weekly dated playlist (e.g., 'Discover Weekly - 2025-09-07')?")
            while True:
                choice = input("   Create weekly playlist? (y/n): ").lower().strip()
                if choice in ['y', 'yes']:
                    create_weekly_playlist = True
                    break
                elif choice in ['n', 'no']:
                    create_weekly_playlist = False
                    break
                else:
                    print("   Please enter 'y' for yes or 'n' for no")
        
        weekly_playlist_id = None
        if create_weekly_playlist:
            # Create weekly playlist (or find existing one)
            weekly_playlist_id = self.create_weekly_playlist()
            
            # Check if weekly playlist already has tracks
            existing_weekly_tracks = self.get_playlist_tracks(weekly_playlist_id)
            
            if existing_weekly_tracks:
                print(f"📝 Weekly playlist already has {len(existing_weekly_tracks)} tracks")
            else:
                # Add tracks to weekly playlist
                print("➕ Adding tracks to weekly playlist...")
                self.add_tracks_to_playlist(weekly_playlist_id, tracks)
            
            playlist_info = self.sp.playlist(weekly_playlist_id)
            print(f"📅 Weekly playlist: {playlist_info['name']}")
            print(f"🔗 URL: {playlist_info['external_urls']['spotify']}")
        else:
            print("⏭️  Skipping weekly playlist creation")
        
        # Add to master collection (this handles duplicates automatically)
        self.save_to_master_collection(tracks)
        
        print(f"✅ Successfully processed Discover Weekly")
        
        return weekly_playlist_id if create_weekly_playlist else True

def load_config():
    """
    Load configuration from config.py or environment variables.
    
    Returns:
        tuple: (client_id, client_secret, redirect_uri, create_weekly_playlists)
        
    Raises:
        ImportError: If config.py doesn't exist and env vars aren't set
        ValueError: If required credentials are missing
    """
    try:
        # Try to import from config.py first
        import config
        client_id = config.SPOTIFY_CLIENT_ID
        client_secret = config.SPOTIFY_CLIENT_SECRET
        redirect_uri = config.SPOTIFY_REDIRECT_URI
        create_weekly = getattr(config, 'CREATE_WEEKLY_PLAYLISTS', False)
        
        print("📁 Loaded configuration from config.py")
        
    except ImportError:
        # Fall back to environment variables
        client_id = os.getenv('SPOTIFY_CLIENT_ID')
        client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')
        redirect_uri = os.getenv('SPOTIFY_REDIRECT_URI', 'http://127.0.0.1:8080/callback')
        create_weekly = False
        
        print("🌍 Loaded configuration from environment variables")
    
    # Validate required credentials
    if not client_id or client_id == "your_client_id_here":
        raise ValueError("SPOTIFY_CLIENT_ID is missing or not configured")
    if not client_secret or client_secret == "your_client_secret_here":
        raise ValueError("SPOTIFY_CLIENT_SECRET is missing or not configured")
    
    return client_id, client_secret, redirect_uri, create_weekly


def setup_config():
    """
    Interactive setup to create config.py file.
    """
    print("🔧 Setting up Discover Weekly Saver configuration...")
    print("\n📋 You'll need to create a Spotify app first:")
    print("   1. Go to https://developer.spotify.com/dashboard/applications")
    print("   2. Click 'Create an App'")
    print("   3. Fill in app name and description")
    print("   4. Set Redirect URI to: http://127.0.0.1:8080/callback")
    print("   5. Copy your Client ID and Client Secret\n")
    
    client_id = input("🔑 Enter your Spotify Client ID: ").strip()
    client_secret = input("🔐 Enter your Spotify Client Secret: ").strip()
    
    print("\n📅 Weekly playlist preference:")
    print("   y = Create weekly dated playlists (e.g., 'Discover Weekly - 2025-09-07')")
    print("   n = Only use master collection (recommended)")
    
    while True:
        create_weekly = input("Create weekly playlists? (y/n): ").lower().strip()
        if create_weekly in ['y', 'yes']:
            create_weekly_playlists = True
            break
        elif create_weekly in ['n', 'no']:
            create_weekly_playlists = False
            break
        else:
            print("Please enter 'y' or 'n'")
    
    # Create config.py
    config_content = f'''"""
Configuration file for Discover Weekly Saver

IMPORTANT: This file contains your API credentials. Do not commit to git!
"""

# Spotify App Credentials
SPOTIFY_CLIENT_ID = "{client_id}"
SPOTIFY_CLIENT_SECRET = "{client_secret}"
SPOTIFY_REDIRECT_URI = "http://127.0.0.1:8080/callback"

# Default behavior for weekly playlist creation
CREATE_WEEKLY_PLAYLISTS = {create_weekly_playlists}
'''
    
    with open('config.py', 'w') as f:
        f.write(config_content)
    
    print("\n✅ Configuration saved to config.py")
    print("🔒 Make sure config.py is in your .gitignore!")
    print("🚀 You can now run the script with: python discover_weekly_saver.py")


def main():
    """
    Main function to run the Discover Weekly saver.
    
    Loads configuration and runs the save process. Handles setup if config is missing.
    """
    print("🚀 Starting Discover Weekly Saver...")
    
    try:
        # Try to load configuration
        client_id, client_secret, redirect_uri, create_weekly = load_config()
        
    except (ImportError, ValueError) as e:
        print(f"\n❌ Configuration error: {e}")
        print("\n🔧 Would you like to set up configuration now?")
        
        choice = input("Run setup? (y/n): ").lower().strip()
        if choice in ['y', 'yes']:
            setup_config()
            # Reload config after setup
            client_id, client_secret, redirect_uri, create_weekly = load_config()
        else:
            print("💡 You can also set environment variables:")
            print("   export SPOTIFY_CLIENT_ID='your_client_id'")
            print("   export SPOTIFY_CLIENT_SECRET='your_client_secret'")
            return
    
    try:
        saver = DiscoverWeeklySaver(client_id, client_secret, redirect_uri)

        # Save Discover Weekly using configured preference
        result = None
        try:
            result = saver.save_discover_weekly(create_weekly_playlist=create_weekly)
        except Exception as e:
            # Detect if the error is related to browser opening (e.g., gio: Operation not supported)
            msg = str(e)
            if 'gio:' in msg and 'Operation not supported' in msg:
                print("❌ Could not open the Spotify authorization URL automatically.")
                print("👉 Please copy and open the following URL in your browser to authorize:")
                # Try to extract the URL from the error message
                import re
                url_match = re.search(r'(https://accounts\.spotify\.com/authorize[^\s]+)', msg)
                if url_match:
                    print(url_match.group(1))
                else:
                    print("(URL not found in error message. Please check your terminal output for the correct link.)")
                print("After authorizing, return here and continue.")
            else:
                print(f"❌ Error: {e}")
                print("💡 Check your Spotify app credentials and network connection")
        if result is not None:
            print("🎉 Complete! Discover Weekly saved and added to collection!")
        else:
            print("❌ Failed to save Discover Weekly")
            print("💡 Make sure Discover Weekly is in your library (follow it on Spotify)")

if __name__ == "__main__":
    main()
